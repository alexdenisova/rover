name: Python CI

on:
  push:
    tags: ["*.*.*"]
    branches: ["*"]
    # branches: [main]
  pull_request:
    branches: [main]

env:
  WORKING_DIR: speech-to-text

jobs:
  update-version:
    runs-on: ubuntu-22.04
    if: github.event_name != 'pull_request'
    outputs:
      stop_workflow: ${{ steps.update_version.outputs.stop_workflow }}
      release_version: ${{ steps.update_version.outputs.release_version }}
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/update_version
        id: update_version
        with:
          repo: $GITHUB_REPOSITORY
          token: ${{ secrets.PERSONAL_TOKEN }}
          path: ${{ env.WORKING_DIR }}
  build:
    runs-on: ubuntu-22.04
    needs: update-version
    if: >-
      always()
      && needs.update-version.outputs.stop_workflow != 'true'
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIR }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Install and configure Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.5.1
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: ${{ env.WORKING_DIR }}/.venv
          key: venv-${{ github.repository }}
      - name: Install dependencies
        run: poetry install --no-interaction --no-root
      - name: Build
        run: >-
          poetry build --format wheel
          && poetry export --without-hashes --format constraints.txt --with-credentials > dist/constraints.txt
          && poetry run python -m pip wheel --isolated --requirement dist/constraints.txt --wheel-dir dist/vendor
      - name: Upload build artifact
        uses: actions/upload-artifact@master
        with:
          name: build
          path: ${{ env.WORKING_DIR }}/dist
  create-tag:
    runs-on: ubuntu-22.04
    needs:
      - update-version
      - build
    if: >-
      needs.update-version.outputs.stop_workflow != 'true'
      && startsWith(github.ref, 'refs/tags/') != true
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.PERSONAL_TOKEN }}
      - run: |
          git tag ${{ needs.update-version.outputs.release_version }}
          git push origin tag ${{ needs.update-version.outputs.release_version }}
  publish-image:
    runs-on: ubuntu-22.04
    needs:
      - update-version
      - build
    if: >-
      needs.update-version.outputs.stop_workflow != 'true'
      && startsWith(github.ref, 'refs/tags/')
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIR }}
    env:
      REGISTRY: ghcr.io
    permissions:
      packages: write
    steps:
      - uses: actions/checkout@v4
      - name: Download build artifact
        uses: actions/download-artifact@master
        with:
          name: build
          path: dist
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build Package
        run: ls && ls dist && docker build -t ${{ github.event.repository.name }} --build-arg PYTHON_MODULE=speech_to_text .
      - name: Publish Package
        run: |-
          TAG="${{ needs.update-version.outputs.release_version }}"
          docker tag ${{ github.event.repository.name }} ${REGISTRY}/${GITHUB_REPOSITORY}:${TAG}
          docker push ${REGISTRY}/${GITHUB_REPOSITORY}:${TAG}

          printf 'image:\n  repository: %s\n  tag: %s\n' \
          "${REGISTRY}/${GITHUB_REPOSITORY}" \
          "$TAG" \
          > "${{ github.event.repository.name }}.values.yaml"
      - name: Upload image artifact
        uses: actions/upload-artifact@master
        with:
          name: image-tag
          path: "${{ env.WORKING_DIR }}/${{ github.event.repository.name }}.values.yaml"
  # push-values:
  #   runs-on: ubuntu-22.04
  #   needs:
  #     - update-version
  #     - publish-image
  #   if: >-
  #     needs.update-version.outputs.stop_workflow != 'true'
  #     && startsWith(github.ref, 'refs/tags/')
  #   env:
  #     VALUES_DIR: "values/google-calendar-utility"
  #   steps:
  #     - name: Checkout into deployment
  #       uses: actions/checkout@v4
  #       with:
  #         repository: alexdenisova/deployment
  #         token: ${{ secrets.PERSONAL_TOKEN }}
  #     - name: Download image artifact
  #       uses: actions/download-artifact@master
  #       with:
  #         name: image-tag
  #         path: ${{ env.VALUES_DIR }}
  #     - name: Commit report
  #       run: |
  #         git config --global user.name 'Action Push'
  #         git config --global user.email 'alexadenisova@gmail.com'
  #         git add -A
  #         git commit -m "New ${{ github.event.repository.name }} version"
  #         git push
  clean-image-tags:
    runs-on: ubuntu-22.04
    needs: publish-image
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/clean_image_tags
        with:
          package_name: ${{ github.event.repository.name }}
          token: ${{ secrets.PERSONAL_TOKEN }}
          leave: 2
