name: Update Project Version
description: |-
  Updates and commits the project version.
  Version is calculated with calver: MAJOR.MINOR.INCREMENT
  where: MAJOR = year, MINOR = month

inputs:
  token:
    description: Token for Github API
    required: true
  repo:
    description: Github Repository <owner/name>
    required: true
  path:
    description: Path to working directory
    required: false
    default: .
outputs:
  release_version:
    description: "The new release version"
    value: ${{ steps.compute.outputs.release_version }}
  stop_workflow:
    description: true if a new version was commited
    value: ${{ steps.compute.outputs.stop_workflow }}

runs:
  using: composite
  steps:
    - uses: actions/checkout@v4
    - name: Determine changed files
      uses: dorny/paths-filter@v3
      id: filter
      with:
        working-directory: ${{ inputs.path }}
        filters: |
          publish:
            - 'src/**'
            - 'pyproject.toml'
            - 'poetry.lock'
            - 'Dockerfile'
    - name: Install and configure Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.5.1
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true
    - name: Compute Version
      shell: bash
      id: compute
      working-directory: ${{ inputs.path }}
      run: |-
        current="$(poetry version | awk '{print $NF}')"
        release_version="$current"
        needs_commit=false
        stop_workflow=false

        if [[ ${{ github.ref }} != refs/tags* ]]; then
          if [[ "${{ steps.filter.outputs.publish }}" != "true" ]]; then
            echo "No relevent changes"
            stop_workflow=true
          else
            tags=($(curl -sL -X 'GET' \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ inputs.token }}" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "https://api.github.com/repos/${{ inputs.repo }}/git/refs/tags" \
              | jq -r 'if type=="array" then .[] | .ref | sub("^refs/tags/"; "") else "" end'))

            if [[ "${tags}" == "" ]]; then
              release_version="$(date '+%y.%-m.0')"
              if [[ "${release_version}" != "${current}" ]]; then
                needs_commit=true
                stop_workflow=true
              fi
            fi

            for tag in "${tags[@]}"; do
              if [[ "$tag" == "$current" ]]; then
                needs_commit=true
                stop_workflow=true
                tag_prefix="$(date '+%y.%-m.')"
                if [[ "$current" == "$tag_prefix"* ]]; then
                  old_inc=${current#*.*.}
                  new_inc=$(($old_inc + 1))
                  if [[ "$old_inc" != "0" ]] && [[ "$new_inc" == "1" ]]; then
                    new_inc="0"
                  fi
                  release_version="$(printf '%s%s' "$tag_prefix" "$new_inc")"
                else
                  release_version="$(printf '%s0' "$tag_prefix")"
                fi
              fi
            done

            if [[ "$needs_commit" == "true" ]]; then
              echo "Computed new release/package version: $release_version"
            else
              echo "New release matches package version. No commit needed"
            fi
          fi
        fi
        printf 'release_version=%s\n' "$release_version" >> $GITHUB_OUTPUT
        printf 'needs_commit=%s\n' "$needs_commit" >> $GITHUB_OUTPUT
        printf 'stop_workflow=%s\n' "$stop_workflow" >> $GITHUB_OUTPUT
        cat $GITHUB_OUTPUT
    - uses: actions/checkout@v4
      if: steps.compute.outputs.needs_commit == 'true'
      with:
        token: ${{ inputs.token }}
    - name: Commit Version
      shell: bash
      if: steps.compute.outputs.needs_commit == 'true'
      working-directory: ${{ inputs.path }}
      run: |
        poetry version  -- "${{ steps.compute.outputs.release_version }}"
        
        git config --global user.name 'Version Update'
        git config --global user.email 'alexadenisova@gmail.com'
        git add -A
        git commit -m "New package version - ${{ steps.compute.outputs.release_version }}"
        git push
